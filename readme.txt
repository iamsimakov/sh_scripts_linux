man <команда> при наличии man страницы <команды> в системе, выводит синтаксис и описание <команды>.

cd / корневая
../ родительская
./ текущая
~/ домашняя

ls видимое содержимое директории 
-a все содержимое
-l размер, права
-dl директория
-Rl рекурсивно
-i иноды
-id /usr/local/bin/.. иноды директории 
-dl /usr/local/ сколько ссылок

echo «asdfg» > copyme перенаправление в файл
echo «asdfg» > copyme дописывание в файл

nano & запуск в фоне
nohup gedit & чтобы при закрытии терминала не закрылся gedit

ctrl+c остановка процесса, полный выход, не всегда работает
ctrl+z приостановление процесса, при этом он остается запущенным
	fg возврат в процесс
	bg перевод процесса в фон
ps текущие процессы
ps -A все
ps -Al все+подробнее
ps -AlF вся возможная инфа
ps -AlFH в иерархическом порядке
ps ax на сервере
pstree дерево
ps -C apache -o =pid вывод ID
ps -p 5577 -o comm= вывод имени по ID

kill <id> убить
kill -s SIGTERM <id> аналог kill
kill -s SIGINT <id> аналог kill
kill -s SIGKILL <id> принудительное заверешние

vim <file> открыть
для выполнения следующих команд нажать сначала ctrl+c
:sp <file2> открыть, разделив окно по горизонтали
:vsp <file3> открыть, разделив по вертикали

ctrl+w W последовательный переход между окнами
:w сохранить
:q выход

y копировать
d вырезать
yy копировать строку
p вставить
{} начало конец абзаца
/ ? поиск, n — следующий результат

i вернуться в режим редактирования файла

sudo apt-get install ssh установка ssh сервера
ssh-keygen -t rsa -b 2048 генерировать ключ длиной 2048 шифрование rsa
сохраняем на сервере ключ *.pub например, в директории %n/.ssh/
затем качаем файл *. на ПК-клиент, там у нас стоит Windows 7 и putty
запускаем puttygen, открываем файл *. вводим пароль, жмем «Личный ключ»
на сервере правим файл конфига /etc/ssh/sshd_config
#ставим нестандартный порт
Port 2332
#Авторизация по ключу должна быть включена
RSAAuthentication yes
PubkeyAuthentication yes
#Проверяем путь к файлу публичного ключа
AuthorizedKeyFile %h/.ssh/id_rsa.pub
настраиваем сессию Puty на Win-машине и помним, что имя пользоваеля для входа, это та уч.запись, под которой мы генерировали ключ

scp <source> <destination>
например, scp alexey@192.168.10.2:/remote/text.txt /~
так копируем с линукс на линукс
если требуется скопировать с linux на win, сидя на win, то можно использовать pscp из комплекта putty
если требуется скопировать с win на linux, то на win надо поднимать ssh сервер

wget <source> <dest>
wget -c ftp://192.168.10.2 /gogoc
-c докачка при разрыве

git status смотреть статус
git add . индексировать
git commit -m «message» записать изменения 
git pull скачать новые изменения
git push project current-branch:remote-branch запись текущей ветки в удаленный репозиторий
git reset --hard <hash> возврат по hash-коду
git branch -a отобразить все ветки
git checkout local-branch переключиться на лок ветку
git merge local-branch наложить  изменения из лок ветки в текущую
git remote update обновить иинформацию о удал репозитории

crontab -e 
строка настройки cron в файле 
0-59/2 * * * * /home/alexey/date.sh

сам скрипт
#!/bin/bash
date > /tmp/cron_test

в приложении 
date.sh — скрипт выводящий время в файл
div.sh — находит наименьший общий делитель
eq_num.sh — проверяет на равенство 2 числа
loop.sh — выводит на экран числа от 0 до 4
loopwh.sh — читает имя, переспрашивает хотим ли мы продолжить и если отвечаем не 'yes' то выход
math.sh — читает 2 числа и выводит результат сложения, деления, сдвига влево и остаток от деления друг на друга
myfor.sh — выводит на экран числа от1 до 10 двумя разными способами и квадраы чисел от 1 до 10
param.sh — проверяет количество параметров, если их 2 то выводит результат сложения и деления, в противном случае выдает ошибку
prog.sh — пример работы case
и текущий отчет
